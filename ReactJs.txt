			 React/React.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

User interfaces:

1.Desktop
2.Browser based web 
3.mobile app

React was created for building web based interface,later react started in mobile development

React - browser
React Native - mobile

....................................................................................
			DOM,VDOM
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.

in order to understand DOM fully , we need to understand HTML very deeply.

HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

Hello.java --->compile--->Hello.class--->run----JVM(Runtime) executes code.

index.html -source code

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
|
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)
|

body
  div
     h1
        Welcome 
     h1
  div
body
|
|
Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body

.....................................................................................
				Runtime 
.....................................................................................
HTML Execution engine : Request Os ,to allocate memory :Runtime


-LinkedList - c language

body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body
|
 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
|
 Layout/Paint Engine: will convert nodes into pxs : final output
....................................................................................
..............................................................................................
Static web pages: htmls are displayed into browser.
..............................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************
Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 How via factory Objects: object helps to get other documents


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?
Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

/////////////////////////////////////////////////////////////////////////////////////
			 React.js
.....................................................................................
DOM programming :

Create new Element:

1.create element
2.attach that element on existing tree. appendChild

function findElement() {
      //get the h1
      const element = document.getElementById('heading');
      console.dir(element);
      //get the content
      console.log(element.innerHTML);
}
findElement();

function updateElement() {
      const element = document.getElementById('heading');
      //element.innerText = 'Welcome to React' : Plain String
      element.innerHTML = 'Welcome to React!'; // which is node
}
updateElement()

function createElement() {
      const element = document.createElement('h2');
      element.innerHTML = 'Hey Buddy Are you new to DOM!';
      //attach that element
      document.body.appendChild(element);
}
createElement();

function applyStyle() {
      const element = document.getElementById('heading');
      //css property inside javascript
      element.style.backgroundColor = 'yellow'

}
applyStyle()

User interaction : Event Handling : UI events

Hardware events : mouse,keyboard,touch events
application events : onload,onupdate,offline,online........

How to add user interaction?

Every dom element has ability to subscribe events called dom events.

ways to attach events?

1.inline events
2.through coding

eventattachment has syntax

on+EventName = "callbackfunction /handler function"

Event Object : Object asscioated with every dom element.

 Which is proxy object between dom element and handler function.

if you want to access any dom element inside event handler, event object will help
event object is created and ready for use inside handler function arg.


 <h1 id="heading" onmouseout="applyMouseOut(event)" onmouseover="applyDynamicStyle(event)">Welcome to DOM</h1>

function applyDynamicStyle(e) {
      console.dir(e);
      const element = e.target;
      console.log(element);
      element.style.backgroundColor = 'green'

}

function applyMouseOut(e) {
      const element = e.target;
      element.style.backgroundColor = 'yellow'
}


<h1 id="heading">Welcome to DOM</h1>

function applyDynamicStyle(e) {
      console.dir(e);
      const element = e.target;
      console.log(element);
      element.style.backgroundColor = 'green'

}
function applyMouseOut(e) {
      const element = e.target;
      element.style.backgroundColor = 'yellow'
}

document.getElementById('heading').addEventListener('mouseover', applyDynamicStyle)

document.getElementById('heading').addEventListener('mouseout', applyMouseOut);
...................................................................................
javascript language can be used to manipulate web documents.

When we use javascript language directly , we face lot of problems

1.Complexity
2.Performance
3.No standard practice
.....................................................................................
..................................................................................
		Birth of Java script libs and frameworks
....................................................................................

In 2001,DOM Wrappers - libs /frameworks came into picture.
 DOJO
2005, JQuery

After 2006 , community people started introducing so many js frameworks and libs..

Most Popular libs and frameworks

1.JQuery
2.Angular.js
3.Dojo
4.Extjs
5.Angular
6.React
7.Vue js
etc.....

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

How react represents dom inside react engine?

Based on VDOM(Virtual DOM) specification...
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

React is created by face book.

React was created not for others but created for face book one of the use case called "Buddylist" / chat application.

instagram web version was fully built by react.

React most implementations

1.flipkart ui is written react.
2.espn cric info
3.facebook use case chat , graph....
4.netflix
etc......

Where we can use React ? What type of application we can build using react.

Single Page web app...

Data intensive application // Data driven app
 where more data , which are chainging rapidly, where you want to update ui very faster with out ui flickering.

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
react-dom.js  => Browser
.....................................................................................
			 React Project Setup
.....................................................................................
We are going to build single page web app.

React teams offers tool set to create react project.

create-react-app:
 This old tool to create react application, almost this tool has been moved into maintaince.

vite:
 Now a days vite based tools are becoming very popular.

npm:
 node package manager

npm create vite@latest my-app

G:\IBM\2024\Nov\ReactiveNative-B1>npm create vite@latest myreact-app
Need to install the following packages:
create-vite@5.5.5
Ok to proceed? (y) y


> npx
> create-vite myreact-app

√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in G:\IBM\2024\Nov\ReactiveNative-B1\myreact-app...

Done. Now run:

  cd myreact-app
  npm install
  npm run dev
...................................................................................
			Exploring Project Structure
...................................................................................

package.json
{
  "name": "myreact-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "vite": "^5.4.10"
  }
}
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

src/main.jsx : root File
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
...................................................................................
			   DOM programming using plain js
...................................................................................
function createNode() {
    const Heading = document.createElement('h1')
    Heading.innerHTML = 'Hello React!'
    console.dir(Heading)
    //get the element where you want to insert
    const rootElement = document.getElementById('root')
    rootElement.appendChild(Heading)
}
createNode()
.....................................................................................
			DOM Programming using React.js
.....................................................................................

// import ReactDOM from 'react-dom/client'
import { createRoot } from "react-dom/client"

//declare DOM 
const Heading = <h1>Hello React! How are you?</h1>

// const rootElement = document.getElementById('root')
// ReactDOM.createRoot(rootElement).render(Heading)

// ReactDOM.createRoot(document.getElementById('root')).render(Heading)
createRoot(document.getElementById('root')).render(Heading)

.....................................................................................
	JSX - java script and XML - langugage to create User interfaces
.....................................................................................

React uses declarative dom programing using a mini language invented by facebook : JSX

JSX : - javascript xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and javascript.
 3.JSX is dsl and declarative.
 4.Every device has its own jsx language syntax.
 5.Browsers jsx can't be used for building mobile application.


Since jsx  is a language cant be executed on browser /mobile directly.
..................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Execute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile

Since jsx  is a language cant be executed on browser /mobile directly.
..................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Execute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile

JSX is used to create dom elements.

Every DOM element is object.
.....................................................................................
................................................................................
				Component
.................................................................................

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(data),behaviour(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....

Component === Widget ==== Object ==== DOM

Like Object tree(DOM Tree), In React we can create "Component" Tree.


      Node===DOM Object====Component
       h1     HTMLHeading   Heading

"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance, A Component can be small as a button or as large as an entire Page"

.....................................................................................
In coding 

There two libs 
1.react.js  => to create component and manages all features related component.
2.react-dom => Render engine.

react.js

1.React
  It top level class which provides all apis to create,delete,update components.


react-dom.js

2.ReactDOM

   It is top level class which provides api to flush the v.dom into real dom.

...................................................................................
			Component Creational patterns
...................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

     Components can be created any one or mixed way  style.
    "functional Pattern" is more popular and recommended pattern....



1.variable pattern
import { createRoot } from "react-dom/client"

//variable pattern 
//Here Heading is just variable , referencing the Component
//<h1>xxx</h1> -  Component
const Heading = <h1>Hello React! How are you?</h1>

createRoot(document.getElementById('root')).render(Heading)


2.functional pattern

 2.1.normal function - es 5 function
 2.1.arrow function -  es 6 function 

es 5 function:
import { createRoot } from "react-dom/client"

//functions 
function Heading() {
    return <h1>Hello, React!</h1>
}

createRoot(document.getElementById('root')).render(Heading())

render(Heading()) -  here we invoke function which is not recommended 

render(<Heading></Heading>) - here we use like html tag 
render(<Heading/>) - here we use like html tag -self closing

import { createRoot } from "react-dom/client"

//functions 
function Heading() {
    return <h1>Hello, React!</h1>
}

// createRoot(document.getElementById('root')).render(Heading())
// createRoot(document.getElementById('root')).render(<Heading></Heading>)

createRoot(document.getElementById('root')).render(<Heading/>)


2.1.arrow function -  es 6 function 
import { createRoot } from "react-dom/client"

//arrow
// const Heading = () => {
//     return <h1>Hello, React!</h1>
// }
const Heading = () => <h1>Hello, React!</h1>

createRoot(document.getElementById('root')).render(<Heading />)
.....................................................................................
			 ES6 Classes
.....................................................................................
The latest react echo system, does not recommend to go with class patterns.

import React from "react"
import { createRoot } from "react-dom/client"

class Heading extends React.Component {

    render() {
        return <h1>Hello React!!</h1>
    }
}


createRoot(document.getElementById('root')).render(<Heading />)


.....................................................................................
			Exploring JSX
.....................................................................................

JS-Javascript
X -  XML

Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

import { createRoot } from "react-dom/client"

const Heading = ()=>{
    return <h1>Hello
}


createRoot(document.getElementById('root')).render(<Heading />)

[plugin:vite:react-babel] G:\IBM\2024\Nov\ReactiveNative-B1\myreact-app\src\main.jsx: Unterminated JSX contents. (8:62)

   6 |
   7 |
>  8 | createRoot(document.getElementById('root')).render(<Heading />)


2. In xml you must have one single root element.
  all elements must be organized under single root element.

   <h1>Welcome to IBM</h1>
   <p>Hello</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

import { createRoot } from "react-dom/client"

const Heading = ()=>{
    return <h1>Hello</h1>
           <p>This is element</p>
}


createRoot(document.getElementById('root')).render(<Heading />)

Solution:
import { createRoot } from "react-dom/client"

const Heading = () => {
    return <div><h1>Hello</h1>
        <p>This is element</p>
    </div>
}


createRoot(document.getElementById('root')).render(<Heading />)


3.Self closing:
import { createRoot } from "react-dom/client"
import logo from './assets/react.svg';

const Heading = () => {
    return <div>
        <img src={logo} />
    </div>
}


createRoot(document.getElementById('root')).render(<Heading />)

4.Component Name must be Pascal Case
  It has to start with capital letter
  It should be Noun

import { createRoot } from "react-dom/client"
import logo from './assets/react.svg';

const heading = () => {
    return <div>
        <img src={logo} />
    </div>
}


createRoot(document.getElementById('root')).render(<heading />)


hook.js:608 Warning: The tag <heading> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter
.......................................................................................................
						               Fragements
.......................................................................................................

There might be use case where i dont want root element, but without root element compiler gives error.
Can we skip the root element without compile time error.

 Yes

Fragements:
  
   Fragements are invisible root element , just only compilation purpose


Syntax:

 <React.Fragment>

 </React.Fragement>
 <Fragment>

 </Fragement>
 <>

 </>
import ReactDOM from 'react-dom/client';
// import React, { Fragment } from 'react';

// const Welcome = () => {
//     return <React.Fragment>
//         <h1>Site Heading</h1>
//         <p>This is react</p>
//     </React.Fragment>
// }

// const Welcome = () => {
//     return <Fragment>
//         <h1>Site Heading</h1>
//         <p>This is react</p>
//     </Fragment>
// }

const Welcome = () => {
    return <>
        <h1>Site Heading</h1>
        <p>This is react</p>
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<Welcome />)

.......................................................................................................
									Component Composition

import { createRoot } from "react-dom/client"


const Hello = () => <h1>Hello,How are you</h1>

const Welcome = () => {
    return <>
        <Hello />
    </>
}
const Greeter = () => {
    return <>
        <Hello />
    </>
}
//Application comonent, which injects other components
const App = () => {
    return <>
        <Welcome />
        <Greeter />
    </>
}


createRoot(document.getElementById('root')).render(<App />)

.....................................................................................
		  			Component Composition and Modularity
.....................................................................................
Every Component will go into separate folders and files, through es 6 modules you can import export components..

https://legacy.reactjs.org/docs/faq-structure.html

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.


Grouping by features or routes

common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<Heading></Heading>)

Component File Naming Convention:

FileName Must start with Capital letter.
Feed.jsx

eg:

src/welcome/Welcome.jsx


export const Welcome = () => {
    return <h1>Hello , How are you</h1>
}
src/App.jsx
import { Welcome } from "./greeter/Welcome"

function App() {
  return <Welcome />
}
export default App

src/main.js
import { createRoot } from "react-dom/client"
import App from './App'


createRoot(document.getElementById('root')).render(<App />)

Task:

 Build layout with component composition 

<Page>
   <Header>
      <Logo/>
   </Header>
    <Main>
		   <Section/>
    </Main>	
   <Footer>
      copyRight
   </Footer>
</Page>

<App>
  <Page>
</App>
.................................................................................
										   Data binding
.................................................................................

Create  new project:

>npm create vite@latest data-binding

As of now we have seen only how to create static UI - (only HTML)

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays


How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 


Simple Databinding:

const User = () => {
    //variables
    const id = 1
    const userName = 'Subramanian Murugan'
    const email = 'sasubramanian_m@hotmail.com'
    const address = {
        city: 'Coimbatore'
    }
    const status = true

    return <div>
        <h1>User info</h1>
        <h3>Id : {id}</h3>
        <h3>Name : {userName}</h3>
        <h4>Email : {email}</h4>
        <h4>City : {address.city}</h4>
        <h4>Status : {status ? "Available" : "Not Available"}</h4>
    </div>

}
export { User }

If you look at the code above,data is declared within component is tightly coupled.
 When you think about component you have to about resuablity.

What if i want to show different user information? How to create component in resuable manner?

Properties
.................................................................................
									  Data binding patterns

1.props pattern /property pattern
2.state pattern

How to create resuable component?

 Component must be paramertized or configurable....

You know very well component is function, just js function, when you think about function, you can pass parameter....


Use case: invoke function and pass data
........................................

src/User.jsx

const User = (id,userName,email,address,status) => {
    return <div>
        <h1>User info</h1>
        <h3>Id : {id}</h3>
        <h3>Name : {userName}</h3>
        <h4>Email : {email}</h4>
        <h4>City : {address.city}</h4>
        <h4>Status : {status ? "Available" : "Not Available"}</h4>
    </div>
}
export { User }

src/App.jsx
import { User } from "./users/User";

function App() {
    return <>
        {User(1, 'Subramanian Murugan', 'subu@gmail.com', { city: 'Coimbatore' }, true)}
    </>
}

export default App;
.................................................................................
							Passing props and receiving props with declrative pattern
................................................................................

src/users/User.jsx

//props is not keyword just variable convention
//props hold object , object has all properties what ever we passed from parent
const User = (props) => {
    console.log(props)
    return <div>
        <h3>Id : {props.id}</h3>
        <h3>Name : {props.userName}</h3>
        <h4>Email : {props.email}</h4>
        <h4>City : {props.address.city}</h4>
        <h4>Status : {props.status ? "Available" : "Not Available"}</h4>
    </div>
}
export { User }

src/App.jsx
import { User } from "./users/User";

// function App() {
//     return <>
//         {User(1, 'Subramanian Murugan', 'subu@gmail.com', { city: 'Coimbatore' }, true)}
//         {User(2, 'Murugan', 'murugan@gmail.com', { city: 'Chennai' }, false)}
//     </>
// }

function App() {
    return <>
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
    </>

}
export default App;
................................................................................
								 Code Refactoring -  Object Destructuring and props
...............................................................................

Destructuring within function:
const User = (props) => {
    const { id, userName, email, address: { city }, status } = props
    return <div>
        <h3>Id : {id}</h3>
        <h3>Name : {userName}</h3>
        <h4>Email : {email}</h4>
        <h4>City : {city}</h4>
        <h4>Status : {status ? "Available" : "Not Available"}</h4>
    </div>
}
export { User }

Destructuring with function args
const User = ({ id, userName, email, address: { city }, status }) => <div>
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

export { User }
..............................................................................
					Adding feature to the User Component -Image-Avatar
						 Component Composition and Props
...............................................................................
src/avatar/Avatar.jsx

const Avatar = ({ profilePic }) => <img src={profilePic} height={100} width={100} />

export { Avatar }

src/users/User.jsx
import { Avatar } from "../avatar/Avatar"

const User = ({ id, userName, email, address: { city }, status, profilePic }) => <div>
    {/* <img src={profilePic} height={100} width={100} /> */}
    <Avatar profilePic={profilePic} />
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

export { User }

src/App.jsx
import { User } from "./users/User";

function App() {
    const profilePic = 'https://imgur.com/1bX5QH6.jpg'
    return <>
        <User id={1} profilePic={profilePic} email='subu@gmail.com' userName='Subramanian Murugan' address={{ city: 'Coimbatore' }} status={true} />
    </>

}
export default App;

How to inspect component tree?
 React dev tools
.................................................................................
					         Default Props
................................................................................

component can receive more no number of properties, all properties we dont need it, if you want to use only specific properties , then we can use default props

Having defaults for any component when you design it.


src/users/User.jsx
import { Avatar } from "../avatar/Avatar"

const User = ({ id = 0, userName = 'Your Name', email = 'Your email', address: { city = "Your City" }, status = false, profilePic = '' }) => <div>
    <Avatar profilePic={profilePic} />
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

//default value for objects
User.defaultProps = {
    address: {
        city: 'Your city'
    }
}

export { User }


src/App.jsx
import { User } from "./users/User";

function App() {
    const profilePic = 'https://imgur.com/1bX5QH6.jpg'
    return <>
        {/* <User id={1} profilePic={profilePic} email='subu@gmail.com' userName='Subramanian Murugan' address={{ city: 'Coimbatore' }} status={true} /> */}
        <User />
        <User id={1} profilePic={profilePic} email='subu@gmail.com' userName='Subramanian Murugan' address={{ city: 'Coimbatore' }} status={true} />
        <User id={1} profilePic={profilePic} ></User>
    </>
}
export default App;
.................................................................................
							Forwarding Props with jsx Spread Notation
.................................................................................

Use Case : with Spread Notation:
................................
src/users/UserDetails.jsx
import { Avatar } from "../avatar/Avatar"

const UserDetails = ({ id = 0, userName = 'Your Name', email = 'Your email', city = "Your City", status = false, profilePic = '' }) => <div>
    <Avatar profilePic={profilePic} />
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

export { UserDetails }

src/users/User.jsx
import { UserDetails } from "./UserDetails"

const User = ({ id = 0, userName = 'Your Name', email = 'Your email', address: { city = "Your City" }, status = false, profilePic = '' }) => <div>
    <UserDetails id={id}
        userName={userName}
        email={email}
        city={city}
        status={status}
        profilePic={profilePic} />
</div>



export { User }
src/App.jsx
import { User } from "./users/User";

function App() {
    const profilePic = 'https://imgur.com/1bX5QH6.jpg'
    return <>
        <User id={1} profilePic={profilePic} email='subu@gmail.com' userName='Subramanian Murugan' address={{ city: 'Coimbatore' }} status={true} />
    </>
}
export default App;


........

    <UserDetails id={id}
        userName={userName}
        email={email}
        city={city}
        status={status}
        profilePic={profilePic} />

Here we pass every prop manually, that can be avoided using spread notation.

Using Spread Notation:
src/users/User.jsx
import { UserDetails } from "./UserDetails"

const User = props => <div>
    {/* ... is Spread Notation: pass every property */}
    <UserDetails {...props}  />
</div>

export { User }
............................................................................................
									 	 List Render
............................................................................................		
How to render list/Array?

npm create vite@latest list-app


To iterate list in react/reactnative

1.map
2.filter
3.find

based on arrays we can create many layouts

1.listView - ul--li
2.gridView - table tag
3.cardView - div/section

using map:

App.jsx
import { List } from "./list/List";

function App() {

  const subjects = ['React', 'ReactNative', 'Javascript', 'Mobile', 'Devops', 'Cloud']
  return <>
    <List subjects={subjects} />
  </>
}
export default App;

src/list/List.jsx

const List = (props) => {
    return <div>
        <h1>List</h1>
        <ul>
            {
                props.subjects.map(subject => {
                    return <li>{subject}</li>
                })
            }
        </ul>
    </div>
}
export { List }
.........................................................................................
									How to render list of objects
...........................................................................................
Using mock data

import { ProductList } from "./list/List";
import { PRODUCTS } from "./mock-data/products";

function App() {

    return <>
        <ProductList products={PRODUCTS} />
    </>
}
export default App;

List.jsx

const ProductList = ({ products }) => {
    return <div>
        {
            products.map(product => {
                return <div key={product.id}>
                    <h2>{product.title}</h2>
                    <img src={product.image} height={150} width={150} />
                    <h5>Category: {product.category} Price : $ {product.price}</h5>
                    <p>{product.description} </p>
                    <h3>Rating : {product.rating.rate} Total {product.rating.count}</h3>
                </div>
            })
        }
    </div>
}
export { ProductList }
...........................................................................................
							Component Composition and List
...........................................................................................

List.jsx
import { ListItem } from "./ListeItem"

const ProductList = ({ products }) => <div>{
    products.map(product => <ListItem product={product} />)
}
</div>

export { ProductList }

ListItem.jsx

const ListItem = props => {
    return <div key={props.product.id}>
        <h2>{props.product.title}</h2>
        <img src={props.product.image} height={150} width={150} />
        <h5>Category: {props.product.category} Price : $ {props.product.price}</h5>
        <p>{props.product.description} </p>
        <h3>Rating : {props.product.rating.rate} Total {props.product.rating.count}</h3>
    </div>
}
export { ListItem }

App.jsx
import { ProductList } from "./list/List";
import { PRODUCTS } from "./mock-data/products";

function App() {

    return <>
        <ProductList products={PRODUCTS} />
    </>
}
export default App;
.................................................................................
									conditional rendering
.................................................................................How to display UI based on condition? How we can use if..else or tenary operator?

In React, you can conditionally render jsx using javascript syntax like if statement ,&& and ?: operator..


Using If..else:
import { TODOS } from "./mock-data/todos"

const Item = props => {
  const { name, status } = props.todo
  if (status) {
    return <li>{name} ✔</li>
  } else {
    return <li>{name}</li>
  }
}
const TodoList = props => {
  return <>
    <ul>
      {
        props.todos.map(todo => {
          return <>
            <Item todo={todo} />
          </>
        })
      }
    </ul>
  </>
}


function App() {
  return <TodoList todos={TODOS} />
}
export default App

import { TODOS } from "./mock-data/todos"

//using traditionl if..else
// const Item = props => {
//   const { name, status } = props.todo
//   if (status) {
//     return <li>{name} ✔</li>
//   } else {
//     return <li>{name}</li>
//   }
// }

// const Item = props => {
//   const { name, status } = props.todo
//   return <li>
//     {status ? `${name} ✔` : name}
//   </li>
// }

// const Item = ({ todo: { name, status } }) => {
//   // const { name, status } = props.todo
//   // console.log(props)
//   return <li>
//     {status ? `${name} ✔` : name}
//   </li>

// }
const CompletedItem = ({ name }) => <span>{name} ✔</span>

const Item = ({ todo: { name, status } }) => {
  // const { name, status } = props.todo
  // console.log(props)
  return <li>
    {status ? <CompletedItem name={name} /> : name}
  </li>

}

const TodoList = props => {
  return <>
    <ul>
      {
        props.todos.map(todo => {
          return <>
            <Item todo={todo} />
          </>
        })
      }
    </ul>
  </>
}


function App() {
  return <TodoList todos={TODOS} />
}
export default App;
.................................................................................
										State Pattern
								    (Event Handling)
................................................................................

What is state?
  State is another way of representing data in React.

As of we have seen data is not changing or updating...

How to introduce State?

There are two ways

1.class pattern 
   It is legacy way of representing state and Managining state
   It is not recommended..

2.Function pattern
    It is modern way of representing state
    State is represented via "Hook".



Class Pattern:

Use case: 1.Declare Component
import React  from "react";

class Review extends React.Component {

  render() {
    return <div>
      <h1>Review App</h1>
    </div>
  }
}

function App() {
    return <>
      <Review/>
    </>
}
export default App;

Use case: How to declare state.

import React from "react";


class Review extends React.Component {

    //declare state
    state = {
        //your state
        like: 0
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h2>Like : {this.state.like}</h2>
        </div>
    }
}

function App() {
    return <>
        <Review />
    </>
}
export default App;
..............................................................................
								   Introducing Event Handling
...............................................................................

Use Case : Introducing listeners
import React from "react";


class Review extends React.Component {

    //declare state
    state = {
        //your state
        like: 0
    }
    //listener 
    onLike = () => {
        console.log('Onlike is called')
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h2>Like : {this.state.like}</h2>
            <button onClick={this.onLike}>Like</button>
        </div>
    }
}

function App() {
    return <>
        <Review />
    </>
}
export default App;
................................................................................
							           State Mutation getting started
................................................................................

How Component can change the data?

-Via State

How state can be changed

-Via Events

import React from "react";


class Review extends React.Component {

    //declare state
    state = {
        //your state
        like: 0
    }
    //listener 
    onLike = () => {
        this.state.like++
        console.log(this.state)
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h2>Like : {this.state.like}</h2>
            <button onClick={this.onLike}>Like</button>
        </div>
    }
}

function App() {
    return <>
        <Review />
    </>
}
export default App;


In the above we have incremented, like inside listener, but no update in UI

Why?
  
  UI logic is written inside render function,
  When ever like is changed, we need to call render function, so that ui could be updated with  new like data.

How to call render?

import React from "react";


class Review extends React.Component {

    //declare state
    state = {
        //your state
        like: 0
    }
    //listener 
    onLike = () => {
        this.state.like++
        // console.log(this.state)
        this.render()
    }
    render() {
        console.log('render is called')
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h2>Like : {this.state.like}</h2>
            <button onClick={this.onLike}>Like</button>
        </div>
    }
}

function App() {
    return <>
        <Review />
    </>
}
export default App;

You can notice in the above, we have called render inside listener, render is called but no UI update.

Why?

Can we call render method directly inside event listener...

Yes, but no impact on ui update...

   onLike = () => {
        this.state.like++
        console.log(this.state.like)
        this.render()
        console.log('onLike is clicked')
    }
Note: render should be not called directly in order to update user interface..
...............................................................................


.................................................................................
		Before writing code, we need to learn the concept
.................................................................................
			Functional Programming principles
.................................................................................

Programming paradigms:
 any programming language is built on the top of programming paradigms
 Collections of set of principles and concepts.

Most popular programming paradigms.
1.Object oriented
   C++,java,C#......
2.Procedural oriented
   C
3.Functional Programming 
   LISP,Clojure,scheme,js

Some languages follow multiple paradigms (hybrid) , some follow single paradigm (solo)

javascript is object based, functional style programming language.
java is object oriented,functional style programming...

What is functional programming?

  It is type of programming paradigm.

functional programming is the first programming paradagim introduced in 1935, as part of Mathmetics called "Lambda Calculs".

The first functional programming language called "LISP" was created in 1955.

React uses fp principles:

1.Pure functions
2.Immuablity

Pure Functions:

Pure functions are defined by two rules..

Rule A:
  if function receives input, the function returns the input without any mutation...

//fp principles : rule A:


//is this function is pure or not : pure 
function Hello(message) {
    return message
}
console.log(Hello('hello'))

//is this function is pure or not: impure function
function doubleIt(value) {
    return value * 2
}
console.log(doubleIt(20))


Are we applying pure function rule a in React?


Yes,With Respect to "props" every function is pure.



//Pure function rule A in react.
import ReactDOM from 'react-dom/client';

//Every component is  based on pure function with respect to "props"
const Welcome = props => {
    //props.message = 'hai' // props are read only
     return <div>
        <h1>{props.message}</h1>
    </div>
}

const App = () => {
    return <>
        <Welcome message="hello" />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
...............................................................................
.....................................................................................
				Pure Function Rule B
....................................................................................

Rule B:
.......
 if function receives input, what if i want to change(mutate),We can apply rule b.
 
if function receives input,and modify input , we should return new object every time, which is called immutablity. 


//pure function Rule B


function updateProfile(city, profile) {
    //update profile city 
    profile.city = city
 
    return profile
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Result:
before update {name: 'Subramanian', city: 'Coimbatore'}
index.js:18 Same Object
index.js:19 after update {name: 'Subramanian', city: 'Chennai'}

The above code is pure or not?

The above is not pure, it is impure.

 "I need to mutate state(data), but at the same time, i need purity"
			
	                  Apply Immutablity Principle


What is immutability?

  When ever you update the data(object), you have to create new object every time.

In order to write immutable code, js supports many patterns

1. Plain js pattern.
//pure function Rule B

function updateProfile(city, profile) {
    //return new object
    return {
        name: profile.name,
        city: city
    }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Plain js pattern has some drawback, we have to copy all the properties manually...

2.Object.assign pattern
//pure function Rule B

function updateProfile(city, profile) {
    //Object.assign 
    return Object.assign({}, profile, { city: city })
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

3.ES 7 Spread operator 
//pure function Rule B

function updateProfile(city, profile) {
      return { ...profile, city }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

.....................................................................................
			Arrays -Pure functions (immutablity)
.....................................................................................

Array pure functions:

1.map
  map is pure function , which returns new array when you iterate.

2.filter
  filter is also function, which returns new array when you iterate.

map:


function transform(data) {

    return data.map(item => item)
}

let list = ['subramanian', 'ram', 'murugan']

const response = transform(list)

console.log(list === response ? "Same" : "Different")

filter:


function filter(data) {

    return data.filter(item => item.status === true)
}

let employees = [{
    id: 1,
    name: 'subramanian',
    status: true
},
{
    id: 2,
    name: 'Ram',
    status: false
},
{
    id: 3,
    name: 'Karthik',
    status: true
},
{
    id: 4,
    name: 'Murugan',
    status: false
}

]

const response = filter(employees)

console.log(employees === response ? "Same" : "Different")
.................................................................................
Add Item:

push

//is it pure or not
function add(todos, todo) {
    return todos.push(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));


Response:
Uncaught TypeError: Cannot add property 1, object is not extensible

You are trying to add  on exiting memory... which is not pure and immutable...

so "array.push" is not pure function.

How to add item into array with purity:

Solution:

1.concat
   it is pure and immutable method..

//is it pure or not
function add(todos, todo) {
   // return todos.push(todo)
   return todos.concat(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));

2.Using spread operator

//is it pure or not
function add(todos, todo) {
    // return todos.push(todo)
    //  return todos.concat(todo)
    return [...todos, todo]
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));
.................................................................................
....................................................................................
			 React state mutation and pure functions
.....................................................................................

this.setState()
  pure function which returns immutable object always..

syntax:
 this.setState(function(state,props){
     //return immutable object
    return {} / object.assign / spread notation
 })
.....................................................................................

State Tracking:

 Previous State and Current State...

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }
    //listener: arrow function
    onLike = () => {
        //react offers the pure function through which only we have to update u
        // this.setState(function (previousState) {
        //     // return {
        //     //     like: previousState.like + 1
        //     // }
        //     // return Object.assign({}, previousState, { like: previousState.like + 1 })
        //     return { ...previousState, like: previousState.like + 1 }
        // })
        // this.setState(previousState => ({ ...previousState, like: previousState.like + 1 }))

        this.setState(function (previousState) {
            console.log('Previous State ',previousState)
            return { ...previousState, like: previousState.like + 1 }
        })
    }
    render() {
        console.log('current state', this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
            <button onClick={this.onLike}>😁</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
.................................................................................
										Multi State variable
.................................................................................
import React from "react";


class Review extends React.Component {

    state = {
        like: 0,
        dislike: 0
    }
    //listener 
    onLike = () => {
        this.setState(prevState => {
            return { ...prevState, like: prevState.like + 1 }
        })
    }
    onDislike = () => {
        this.setState(prevState => {
            return { ...prevState, dislike: prevState.dislike + 1 }
        })
    }
    render() {
        return <div>
            <h1>Review App</h1>
            <h2>Like : {this.state.like}  Dislike : {this.state.dislike}</h2>
            <button onClick={this.onLike}>Like</button>
            <button onClick={this.onDislike}>Dislike</button>

        </div>
    }
}

function App() {
    return <>
        <Review />
    </>
}
export default App;
................................................................................
								InLine Listeners
...............................................................................
import React from "react";


class Review extends React.Component {
    state = {
        like: 0,
        dislike: 0
    }
    render() {
        return <div>
            <h1>Review App</h1>
            <h2>Like : {this.state.like}  Dislike : {this.state.dislike}</h2>
            <button onClick={() => {
                this.setState(prevState => {
                    return { ...prevState, like: prevState.like + 1 }
                })
            }}>Like</button>
            <button onClick={() => {
                this.setState(prevState => {
                    return { ...prevState, dislike: prevState.dislike + 1 }
                })
            }}>Dislike</button>

        </div>
    }
}

function App() {
    return <>
        <Review />
    </>
}
export default App;
.................................................................................
						Component Composition: state as prop, listener as prop
									 (Dynamic Prop)
..............................................................................
import React from "react";


class Review extends React.Component {
    state = {
        like: 0,
        dislike: 0
    }
    onLike = () => {
        this.setState(prevState => {
            return { ...prevState, like: prevState.like + 1 }
        })
    }
    onDislike = () => {
        this.setState(prevState => {
            return { ...prevState, dislike: prevState.dislike + 1 }
        })
    }
    render() {
        return <ReviewDashboard {...this.state} onLike={this.onLike} onDislike={this.onDislike} />
    }
}
const ReviewDashboard = props => {
    return <div>
        <h1>Review App</h1>
        <h2>Like : {props.like}  Dislike : {props.dislike}</h2>
        <button onClick={props.onLike}>Like</button>
        <button onClick={props.onDislike}>Dislike</button>
    </div>
}

function App() {
    return <>
        <Review />
    </>
}
export default App;

.......................................................................................................
                            setState and Object Destructuring
.....................................................................................................
								
import React from "react";


class Review extends React.Component {
    state = {
        like: 0,
        dislike: 0
    }
    onLike = () => {
        // this.setState(prevState => {
        //     return { ...prevState, like: prevState.like + 1 }
        // })
        // this.setState(prevState => ({ ...prevState, like: prevState.like + 1 }))

        this.setState(({ ...this.state, like: this.state.like + 1 }))

    }
    onDislike = () => {
        // this.setState(prevState => ({ ...prevState, dislike: prevState.dislike + 1 }))
        this.setState(({ ...this.state, dislike: this.state.dislike + 1 }))

    }
    render() {
        return <ReviewDashboard {...this.state} onLike={this.onLike} onDislike={this.onDislike} />
    }
}
const ReviewDashboard = props => {
    return <div>
        <h1>Review App</h1>
        <h2>Like : {props.like}  Dislike : {props.dislike}</h2>
        <button onClick={props.onLike}>Like</button>
        <button onClick={props.onDislike}>Dislike</button>
    </div>
}

function App() {
    return <>
        <Review />
    </>
}
export default App;

.....................................................................................................
									Nested State
....................................................................................................

simple state:

state = {
   like:0
}


State with in state:
...................
state= {
   house:{
     name:'RavenClaw',
     points:10
   }
}
import React from "react";


class Review extends React.Component {
    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        },

    }

    onLike = () => {
        this.setState(prevState => {
            return {
                ...prevState, //level-0-copy // copy all outer keys of state
                house: {
                    ...prevState.house, // level-1 copy //copy all state except points
                    points: prevState.house.points + 1
                }

            }
        })
    }
    render() {
        return <div>
            <h1>House Review App</h1>
            <h2>{this.state.house.name}</h2>
            <h2>Points {this.state.house.points}</h2>
            <button onClick={this.onLike}>Like</button>
        </div>
    }
}


function App() {
    return <>
        <Review />
    </>
}
export default App;

.....................................................................................
				Deep Nesting
.....................................................................................

Assigment:
    state = {
        customer: {
            id: 1,
            name: 'Subramanian',
            contact: {
                address: {
                    city: 'Chennai'
                },
                communcation: {
                    mobileNo: '9000000'
                }
            }
        }
    }

How to update mobileNo - 834343434







